webrpc = v1

name = bundler
version = v0.1.0

# TODO: we may move the core types to protobuf, and use this just for RPC
# calls. Or we can keep this, rename to bundler.ridl and this for all types..

struct Version
  - webrpcVersion: string
  - schemaVersion: string
  - schemaHash: string
  - nodeVersion: string

struct Status
  - healthOK: bool # overall status, true/false
  - startTime: timestamp
  - uptime: uint64
  - ver: string
  - branch: string
  - commitHash: string

  - hostId: string
    + go.field.name = HostID
  - hostAddrs: []string
  - priorityPeers: []string
  #- topics: []string


struct Operation
  # TODO: use prototyp.Hash etc

  # contract address that must be called with callData to execute the operation.
  - entrypoint: string
    + go.field.type = prototyp.Hash

  # data (in hex) that must be passed to the entrypoint call to execute the operation.
  - callData: string
    + go.field.type = prototyp.Hash

  # minimum gasLimit that must be passed when executing the operation.
  - gasLimit: string
    + go.field.type = prototyp.BigInt

  # contract address of the ERC-20 token used to repay the bundler. (address(0) for the native token).
  - feeToken: string
    + go.field.type = prototyp.Hash

  # address of the endorser contract that should be used to validate the operation.
  - endorser: string
    + go.field.type = prototyp.Hash

  # additional data that must be passed to the endorser when calling isOperationReady().
  - endorserCallData: string
    + go.field.type = prototyp.Hash

  # amount of gas that should be passed to the endorser when validating the operation.
  - endorserGasLimit: string
    + go.field.type = prototyp.BigInt

  # uint256 max amount of basefee that the operation execution is expected to pay. (Similar to EIP-1559 max_fee_per_gas).
  - maxFeePerGas: string # TODO: can we use BigInt in JS later..? check webrpc..
    + go.field.type = prototyp.BigInt

  # uint256	fixed amount of fees that the operation execution is expected to pay to the bundler. (Similar to EIP-1559 max_priority_fee_per_gas).
  - priorityFeePerGas: string	# TODO: can we use BigInt in JS later..? check webrpc..	
    + go.field.type = prototyp.BigInt

  # Scaling factor to convert block.basefee into the feeToken unit.
  - baseFeeScalingFactor: string
    + go.field.type = prototyp.BigInt

  # Normalization factor to convert block.basefee into the feeToken unit.
  - baseFeeNormalizationFactor: string
    + go.field.type = prototyp.BigInt

  # If true, the operation may have untrusted code paths. These should be treated differently by the bundler (see untrusted environment).
  - hasUntrustedContext: bool

enum MessageType: int
  - DEBUG
  - NEW_OPERATION

struct Message
  - type: MessageType
  - message: any

struct MempoolView
  - freshOperationsSize: int
  - operationsSize: int
  - seenSize: int
  - lockSize: int
  - seen: []string
  - freshOperations: any
  - operations: any

error 1000 NotFound "Not found" HTTP 404
error 2000 Unauthorized "Unauthorized access" HTTP 401
error 3000 PermissionDenied "Permission denied" HTTP 403


service Bundler
  - Ping() => (status: bool)
  - Status() => (status: Status)
  - Peers() => (peers: []string, priorityPeers: []string)
  - Mempool() => (mempool: MempoolView)
  - SendOperation(operation: Operation) => (status: bool)

service Debug
  - Broadcast(message: any) => (status: bool)
