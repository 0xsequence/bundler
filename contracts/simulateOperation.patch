8c8
< contract OperationValidator {
---
> contract OperationValidatorSimulator {
38,72c38
<   ) external returns (SimulationResult memory result) {
<     uint256 preBal = fetchPaymentBal(_feeToken);
<     
<     uint256 preGas = gasleft();
<     // Ignore the return value, we don't trust any of it
<     _entrypoint.call{ gas: _gasLimit }(_data);
< 
<     {
<       uint256 postGas = gasleft();
<       uint256 postBal = fetchPaymentBal(_feeToken);
< 
<       uint256 gasUsed = preGas - postGas + _calldataGas;
<       uint256 gasPrice = Math.min(block.basefee + _maxPriorityFeePerGas, _maxFeePerGas);
<       uint256 expectPayment = gasUsed * gasPrice;
< 
<       result.paid = postBal - preBal >= expectPayment;
<     }
< 
<     // We didn't got paid, we need to know
<     // if the endorser considers the operation ready
<     // if so, he lied to us
<     if (!result.paid) {
<       (result.lied, , ) = Endorser(_endorser).isOperationReady(
<         _entrypoint,
<         _data,
<         _endorserCallData,
<         _gasLimit,
<         _maxFeePerGas,
<         _maxPriorityFeePerGas,
<         _feeToken,
<         _baseFeeScalingFactor,
<         _baseFeeNormalizationFactor,
<         _hasUntrustedContext
<       ); 
<     }
---
>   ) external view returns (SimulationResult memory result) {
